syntax = "proto3";
option java_package = "io.datanerd.generated.es";
option java_multiple_files = true;
import "grpc_mate/product_common.proto";
import "google/api/annotations.proto";
//make sure this can be used in grpc gateway
option go_package = "datanerd";

service ProductUpdateService {
    //upload product into elastic search , make it so that we could search on it
    //used to demo client side stream
    rpc UploadProduct (stream Product) returns (UploadProductResponse) {

    }
}


message UploadProductResponse {
    enum ResultStatus {
        SUCCESS = 0;
        FAILED = 1;
    }
    ResultStatus result_status = 1;
}

service ProductReadService {
    //download product by category
    //used to demo server side stream
    rpc DownloadProducts (DownloadProductsRequest) returns (stream Product) {

    }
    //search product and return all matched products
    //used to demo simple grpc call
    rpc SearchProducts (SearchProductsRequest) returns (SearchProductsResponse) {
    }

    //calcualte each proeuct sore based on simple rule
    //used to demo bi directional stream
    rpc CalculateProductScore (stream Product) returns (stream CalculateProductScoreResponse) {
    }

    rpc DownloadProductImage(DownloadProductImageRequest) returns(stream DataChunk){
    }
}

message DownloadProductImageRequest {
    int64 product_id = 1;
}

message DownloadProductsRequest {
    string category = 1;
}

message SearchProductsRequest {
    string key_word = 1;
    int32 limit = 2;
}

message SearchProductsResponse {
    repeated Product products = 1;
}

message CalculateProductScoreResponse {
    Product product = 1;
    int64 score = 2;
}

service EchoService {
    rpc Echo (EchoRequest) returns (EchoResponse) {
        option (google.api.http) = {
          post: "/grpc/api/v1/echo"
          body: "*"
        };
    }
}

message EchoRequest {
    string ping = 1;
}

message EchoResponse {
    string pong = 2;
}
